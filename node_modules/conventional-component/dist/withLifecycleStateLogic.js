'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _getDisplayName = require('./getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withLifecycleStateLogic = function withLifecycleStateLogic() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      shouldDispatchReceiveNextProps = _ref.shouldDispatchReceiveNextProps;

  return function (BaseComponent) {
    var factory = (0, _react.createFactory)(BaseComponent);

    var WithLifecycleStateLogic = function (_Component) {
      _inherits(WithLifecycleStateLogic, _Component);

      function WithLifecycleStateLogic() {
        _classCallCheck(this, WithLifecycleStateLogic);

        return _possibleConstructorReturn(this, (WithLifecycleStateLogic.__proto__ || Object.getPrototypeOf(WithLifecycleStateLogic)).apply(this, arguments));
      }

      _createClass(WithLifecycleStateLogic, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.props.init(this.props);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          var shouldDispatch = typeof shouldDispatchReceiveNextProps === 'function' ? shouldDispatchReceiveNextProps(this.props, nextProps) : !!shouldDispatchReceiveNextProps;
          if (shouldDispatch) {
            this.props.receiveNextProps(nextProps);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.props.destroy();
        }
      }, {
        key: 'render',
        value: function render() {
          return factory(this.props);
        }
      }]);

      return WithLifecycleStateLogic;
    }(_react.Component);

    if (process.env.NODE_ENV !== 'production') {
      var componentName = (0, _getDisplayName2.default)(BaseComponent, 'Component');
      WithLifecycleStateLogic.displayName = 'withLifecycleStateLogic(' + componentName + ')';
    }

    return WithLifecycleStateLogic;
  };
};

exports.default = withLifecycleStateLogic;