'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialState = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _getDisplayName = require('./getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var without = function without() {
  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments[1];

  var idx = arr.indexOf(value);
  if (idx > -1) {
    return [].concat(_toConsumableArray(arr)).splice(idx, 1);
  }
  return arr;
};

var defaultEmptyArray = [];

var initialState = {
  mountedIdentities: []
};

var createDefaultIdentifierPredicate = function createDefaultIdentifierPredicate(componentName) {
  return function (identity) {
    return identity.startsWith(componentName);
  };
};

function withReducerIdentity(identifierPredicate, identifiedReducer) {
  var identityMatches = typeof identifierPredicate === 'function' ? identifierPredicate : createDefaultIdentifierPredicate(identifierPredicate);

  function withIdentity() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    var identities = action.identity ? defaultEmptyArray.concat(action.identity) : defaultEmptyArray;

    var mountedIdentities = state.mountedIdentities;

    if (identities.length > 0) {
      return identities.reduce(function (newState, identity) {
        var _extends2;

        if (!identityMatches(identity)) {
          return newState;
        }

        if (action.type === _actions.DESTROY) {
          var amendedState = _extends({}, newState);
          delete amendedState[identity];
          amendedState.mountedIdentities = without(identity, amendedState.mountedIdentities);
          return amendedState;
        }

        var amendedMountedIdentities = mountedIdentities;
        if (action.type === _actions.INIT && mountedIdentities.includes(identity) === false) {
          amendedMountedIdentities = [].concat(_toConsumableArray(mountedIdentities));
          amendedMountedIdentities.push(identity);
        }

        return _extends({}, newState, (_extends2 = {}, _defineProperty(_extends2, identity, identifiedReducer(state[identity], action)), _defineProperty(_extends2, 'mountedIdentities', amendedMountedIdentities), _extends2));
      }, _extends({}, state));
    }

    return state;
  }

  if (process.env.NODE_ENV !== 'development') {
    var reducerName = (0, _getDisplayName2.default)(identifiedReducer, 'identifiedReducer');
    withIdentity.displayName = 'withIdentity(' + reducerName + ')';
  }

  return withIdentity;
}

exports.initialState = initialState;
exports.default = withReducerIdentity;