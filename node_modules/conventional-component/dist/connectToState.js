'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _getDisplayName = require('./getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_IDENTITY = undefined;

var bindActionCreator = function bindActionCreator(dispatch) {
  return function (actionCreator) {
    var fn = function fn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return dispatch(actionCreator.apply(undefined, [NO_IDENTITY].concat(args)));
    };

    fn.displayName = (0, _getDisplayName2.default)(actionCreator, 'AnonymousBoundActionCreator');

    return fn;
  };
};

var bindActionCreators = function bindActionCreators() {
  var actions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var dispatch = arguments[1];

  var bind = bindActionCreator(dispatch);
  var actionCreatorKeys = Object.keys(actions).filter(function (actionCreatorKey) {
    return typeof actions[actionCreatorKey] === 'function';
  });
  return actionCreatorKeys.reduce(function (boundActionCreators, actionCreatorKey) {
    var boundActionCreator = bind(actions[actionCreatorKey]);
    return _extends({}, boundActionCreators, _defineProperty({}, actionCreatorKey, boundActionCreator));
  }, {});
};

var connectToState = function connectToState(reducer, actionCreators) {
  var initialState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  return function (BaseComponent) {
    var factory = (0, _react.createFactory)(BaseComponent);

    var ConnectToState = function (_Component) {
      _inherits(ConnectToState, _Component);

      function ConnectToState() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ConnectToState);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ConnectToState.__proto__ || Object.getPrototypeOf(ConnectToState)).call.apply(_ref, [this].concat(args))), _this), _this.state = reducer(initialState, { type: undefined }), _this.isControlledProp = function (key) {
          return _this.props[key] !== undefined;
        }, _this.getState = function () {
          var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state;

          var stateToMerge = state || {};
          return Object.keys(stateToMerge).reduce(function (partialState, key) {
            partialState[key] = _this.isControlledProp(key) && _this.props[key] !== stateToMerge[key] ? _this.props[key] : stateToMerge[key];
            return partialState;
          }, {});
        }, _this.dispatch = function (action) {
          var hasOnChange = typeof _this.props.onChange === 'function';
          var isPropChange = action.type === _actions.INIT || action.type === _actions.RECEIVE_NEXT_PROPS;

          _this.setState(function (state) {
            var newState = reducer(_this.getState(state), action);

            // Ensure that we do not send out the props that were just passed in.
            if (hasOnChange && isPropChange === false) {
              _this.props.onChange(newState);
            }

            return newState;
          });
        }, _this.actionCreators = bindActionCreators(_extends({}, actionCreators, { init: _actions.init, receiveNextProps: _actions.receiveNextProps, destroy: _actions.destroy }), _this.dispatch), _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(ConnectToState, [{
        key: 'render',
        value: function render() {
          return factory(_extends({}, this.state, this.props, this.actionCreators, {
            dispatch: this.dispatch
          }));
        }
      }]);

      return ConnectToState;
    }(_react.Component);

    if (process.env.NODE_ENV !== 'production') {
      var componentName = (0, _getDisplayName2.default)(BaseComponent, 'Component');
      ConnectToState.displayName = 'connectToState(' + componentName + ')';
    }

    return ConnectToState;
  };
};

exports.default = connectToState;